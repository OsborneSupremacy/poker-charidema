<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="_Hands.ttinclude" #>
namespace Poker.Domain.Classic.Hands;
// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

/// <summary>
/// Five-of-a-Kind is not a classic Poker hand. It is not always allowed. It can only be
/// met with a wild card, and when that happens the wild card has to impersonate another
/// card that the player is holding (or a card being impersonated by another wild card).
/// 
/// Because of that, the typically strategy for determining if a player's card satisfy a 
/// hand's requirement don't work, because it assumes that a player can only have one of the
/// same card in their hard. We could change that assumption, but the assumption is useful
/// in every other scenario, and working around it would required complexity to be added
/// to <see cref="Functions.Classic.ClassicHandEvaluator"/>.
/// 
/// So we're getting around this by adding the same card to the list of
/// <see cref="HandSegment.EligibleCards"/> for each possible Five-of-a-Kind, giving it
/// a different Id so that it's not considered identical to the original card. We only
/// need to add a second Spade, because we'll only ever need one "duplicate" standard card 
/// (Spade being the highest <see cref="Suit.Priority"/> (not value) suit in this application.
/// By doing that, a wild card can impersonate the second spade, and we can continue to 
/// make the useful assumption described earlier.
/// </summary>
public record FiveOfAKind
{
<#
    foreach (var rank in ranks)
    {
#>
    public static Hand <#= rank.plural#> { get; } = new()
    {
        Name = "Five <#= rank.plural#>",
        HandDefinition = HandDefinitions.FiveOfAKind,
        HighRank = Ranks.<#= rank.singular#>,
        Suit = Suits.Empty,
        HandSegments = new List<HandSegment>
        {
            new()
            {
                RequiredCount = 5,
                EligibleCards = new()
                {
                    Cards.<#= rank.singular#>OfSpades,
                    Cards.<#= rank.singular#>OfHearts,
                    Cards.<#= rank.singular#>OfClubs,
                    Cards.<#= rank.singular#>OfDiamonds,
                    Cards.<#= rank.singular#>OfSpades with { }
                }
            }
        }
    };

<#
    } // end rank loop
#>
}
