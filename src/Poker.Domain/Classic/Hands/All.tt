<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    List<(string singular, string plural, int value)> ranks = new()
    {
        ("Two", "Twos", 2),
        ("Three", "Threes", 3),
        ("Four", "Fours", 4),
        ("Five", "Fives", 5),
        ("Six", "Sixes", 6),
        ("Seven", "Sevens", 7),
        ("Eight", "Eights", 8),
        ("Nine", "Nines", 9),
        ("Ten", "Tens", 10),
        ("Jack", "Jacks", 11),
        ("Queen", "Queens", 12),
        ("King", "Kings", 13),
        ("Ace", "Aces", 14)
    };

    List<string> hands = new()
    {
        "HighCard",
        "Pair",
        "TwoPair",
        "ThreeOfAKind",
        "Straight",
        "Flush",
        "FullHouse",
        "FourOfAKind",
        "StraightFlush",
        "RoyalFlush",
        "FiveOfAKind"
    };

    List<string> suits = new()
    {
        "Spades",
        "Hearts",
        "Clubs",
        "Diamonds"
    };
#>
namespace Poker.Domain.Classic.Hands;

// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
public static class AllHands
{
    public static List<Hand> All { get; } =
        new()
        {
            NoHands.NoHand,
<#
    foreach (var rank in ranks) // generate high cards, pairs, three of a kind, four of a kind, five of a kind, and straights
    {
#>
            HighCards.<#= rank.singular #>,
            Pairs.<#= rank.plural #>,
            ThreeOfAKind.<#= rank.plural #>,
            FourOfAKind.<#= rank.plural #>,
            FiveOfAKind.<#= rank.plural #>,
<#
        if (rank.value >= 6)
        {
#>
            Straights.<#= rank.singular #>High,
<#            
        }
    } // end rank loop
    
    foreach (var primaryrank in ranks) // generate two pair and full houses
    {
        foreach (var secondaryrank in ranks)
        {
            if(secondaryrank.value < primaryrank.value)
            {
#>
            TwoPair.<#= primaryrank.plural #>Over<#= secondaryrank.plural #>,
<#
            }
            if (secondaryrank != primaryrank)
            {
#>
            FullHouses.<#= primaryrank.plural #>Over<#= secondaryrank.plural #>,
<#                
            }
        } // end secondary rank loop
    } // end primary rank loop
    
    foreach (var suit in suits) // generate regular flushes and royal flushes
    {
#>
            Flushes.<#= suit #>,
            RoyalFlushes.<#= suit #>,
<#        
    } // end suit loop
    
    foreach (var suit in suits) // generate straight flushes
    {
        foreach (var rank in ranks
            .Where(r => r.value >= 6)
            .Where(r => r.value < 14))
        {
#>
            StraightFlushes.<#= rank.singular #>High<#= suit #>,
<#            
        } // end rank loop
    } // end suit loop
#>
        };
}
