<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="_Hands.ttinclude" #>
<#@ import namespace="System.Linq" #>
// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
namespace Poker.Domain.Classic.Hands;

public static class Straights
{
<#
    foreach(var rank in ranks.Where(r => r.value >= 6))
    {
#>
    public static Hand <#= rank.singular #>High { get; } = new()
    {
        Name = "<#= rank.singular #> High Straight",
        HandDefinition = HandDefinitions.Straight,
        HighRank = Ranks.<#= rank.singular #>,
        Suit = Suits.Empty,
        HandSegments = new List<HandSegment>
        {
            new()
            {
                RequiredCount = 1,
                EligibleCards = new()
                {
                    Cards.<#= ranks[ranks.IndexOf(rank)].singular #>OfSpades,
                    Cards.<#= ranks[ranks.IndexOf(rank)].singular #>OfHearts,
                    Cards.<#= ranks[ranks.IndexOf(rank)].singular #>OfDiamonds,
                    Cards.<#= ranks[ranks.IndexOf(rank)].singular #>OfClubs
                }
            },
            new()
            {
                RequiredCount = 1,
                EligibleCards = new()
                {
                    Cards.<#= ranks[ranks.IndexOf(rank) - 1].singular #>OfSpades,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 1].singular #>OfHearts,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 1].singular #>OfDiamonds,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 1].singular #>OfClubs
                }
            },
            new()
            {
                RequiredCount = 1,
                EligibleCards = new()
                {
                    Cards.<#= ranks[ranks.IndexOf(rank) - 2].singular #>OfSpades,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 2].singular #>OfHearts,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 2].singular #>OfDiamonds,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 2].singular #>OfClubs
                }
            },
            new()
            {
                RequiredCount = 1,
                EligibleCards = new()
                {
                    Cards.<#= ranks[ranks.IndexOf(rank) - 3].singular #>OfSpades,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 3].singular #>OfHearts,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 3].singular #>OfDiamonds,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 3].singular #>OfClubs
                }
            },
            new()
            {
                RequiredCount = 1,
                EligibleCards = new()
                {
                    Cards.<#= ranks[ranks.IndexOf(rank) - 4].singular #>OfSpades,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 4].singular #>OfHearts,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 4].singular #>OfDiamonds,
                    Cards.<#= ranks[ranks.IndexOf(rank) - 4].singular #>OfClubs
                }
            }
        }
    };

<#
    } // end rank loop
#> 
}
