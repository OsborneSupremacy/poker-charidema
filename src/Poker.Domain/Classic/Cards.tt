<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    List<(string singular, string plural, string cardtype, int value)> ranks = new()
    {
        ("Two", "Twos", "Spot", 2),
        ("Three", "Threes", "Spot", 3),
        ("Four", "Fours", "Spot", 4),
        ("Five", "Fives", "Spot", 5),
        ("Six", "Sixes", "Spot", 6),
        ("Seven", "Sevens", "Spot", 7),
        ("Eight", "Eights", "Spot", 8),
        ("Nine", "Nines", "Spot", 9),
        ("Ten", "Tens", "Spot", 10),
        ("Jack", "Jacks", "Face", 11),
        ("Queen", "Queens", "Face", 12),
        ("King", "Kings", "Face", 13),
        ("Ace", "Aces", "Ace", 14)
    };

    List<string> suits = new()
    {
        "Spades",
        "Hearts",
        "Clubs",
        "Diamonds"
    };
#>
namespace Poker.Domain.Classic;

// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
public static class Cards
{
    public static Card Empty { get; } = new()
    {
        Value = string.Empty,
        CardType = CardTypes.Empty,
        FaceDirection = FaceDirections.NotApplicable,
        IsWild = false,
        Rank = Ranks.Empty,
        Suit = Suits.Empty,
        Holdings = new()
    };

<#
foreach(var rank in ranks)
{
    foreach (var suit in suits)
    {
#>
    public static Card <#= rank.singular #>Of<#= suit #> { get; } = new()
    {
        Value = "<#= rank.value #><#= suit.Substring(0, 1) #>",
        CardType = CardTypes.<#= rank.cardtype #>,
        FaceDirection = FaceDirections.NotApplicable,
        IsWild = false,
        Rank = Ranks.<#= rank.singular #>,
        Suit = Suits.<#= suit #>,
        Holdings = new()
    };

<#
    } // end suit loop
} // end rank loop
#>
    public static Card CreateJoker() => new()
    {
        Value = "W", // for "wild". "J" is already taken by Jack
        IsWild = true,
        CardType = CardTypes.Joker,
        Rank = Ranks.Empty,
        Suit = Suits.Empty,
        FaceDirection = FaceDirections.NotApplicable,
        Holdings = new()
    };

    public static List<Card> All { get; } = new() {<#
foreach (var suit in suits)
{
    foreach (var rank in ranks)
    {#>        
        <#= rank.singular #>Of<#= suit #>,<#      
    } // end rank loop
} // end suit loop
#>   
    };
}
